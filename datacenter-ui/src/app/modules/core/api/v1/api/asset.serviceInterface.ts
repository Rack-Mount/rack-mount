/**
 * Datacenter API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Asset } from '../model/models';
import { AssetCustomField } from '../model/models';
import { AssetModel } from '../model/models';
import { AssetState } from '../model/models';
import { AssetType } from '../model/models';
import { PaginatedAssetCustomFieldList } from '../model/models';
import { PaginatedAssetList } from '../model/models';
import { PaginatedAssetModelList } from '../model/models';
import { PaginatedAssetStateList } from '../model/models';
import { PaginatedAssetTypeList } from '../model/models';
import { PaginatedRackList } from '../model/models';
import { PaginatedRackTypeList } from '../model/models';
import { PaginatedRackUnitList } from '../model/models';
import { PaginatedVendorList } from '../model/models';
import { Rack } from '../model/models';
import { RackType } from '../model/models';
import { RackUnit } from '../model/models';
import { Vendor } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface AssetAssetCreateRequestParams {
    asset: Asset;
}

export interface AssetAssetCustomFieldCreateRequestParams {
    assetCustomField?: AssetCustomField;
}

export interface AssetAssetCustomFieldDestroyRequestParams {
    id: number;
}

export interface AssetAssetCustomFieldListRequestParams {
    ordering?: string;
    page?: number;
    pageSize?: number;
}

export interface AssetAssetCustomFieldPartialUpdateRequestParams {
    id: number;
    assetCustomField?: AssetCustomField;
}

export interface AssetAssetCustomFieldRetrieveRequestParams {
    id: number;
}

export interface AssetAssetCustomFieldUpdateRequestParams {
    id: number;
    assetCustomField?: AssetCustomField;
}

export interface AssetAssetDestroyRequestParams {
    id: number;
}

export interface AssetAssetListRequestParams {
    hostname?: string;
    model?: number;
    modelType?: number;
    modelVendor?: number;
    orderId?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    sapId?: string;
    search?: string;
    serialNumber?: string;
    state?: number;
}

export interface AssetAssetModelCreateRequestParams {
    assetModel: AssetModel;
}

export interface AssetAssetModelDestroyRequestParams {
    id: number;
}

export interface AssetAssetModelListRequestParams {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    type?: number;
    vendor?: number;
}

export interface AssetAssetModelPartialUpdateRequestParams {
    id: number;
    assetModel: AssetModel;
}

export interface AssetAssetModelRetrieveRequestParams {
    id: number;
}

export interface AssetAssetModelUpdateRequestParams {
    id: number;
    assetModel: AssetModel;
}

export interface AssetAssetPartialUpdateRequestParams {
    id: number;
    asset: Asset;
}

export interface AssetAssetRetrieveRequestParams {
    id: number;
}

export interface AssetAssetStateCreateRequestParams {
    assetState: AssetState;
}

export interface AssetAssetStateDestroyRequestParams {
    id: number;
}

export interface AssetAssetStateListRequestParams {
    name?: string;
    page?: number;
    pageSize?: number;
}

export interface AssetAssetStatePartialUpdateRequestParams {
    id: number;
    assetState: AssetState;
}

export interface AssetAssetStateRetrieveRequestParams {
    id: number;
}

export interface AssetAssetStateUpdateRequestParams {
    id: number;
    assetState: AssetState;
}

export interface AssetAssetTypeCreateRequestParams {
    assetType: AssetType;
}

export interface AssetAssetTypeDestroyRequestParams {
    id: number;
}

export interface AssetAssetTypeListRequestParams {
    name?: string;
    page?: number;
    pageSize?: number;
}

export interface AssetAssetTypePartialUpdateRequestParams {
    id: number;
    assetType: AssetType;
}

export interface AssetAssetTypeRetrieveRequestParams {
    id: number;
}

export interface AssetAssetTypeUpdateRequestParams {
    id: number;
    assetType: AssetType;
}

export interface AssetAssetUpdateRequestParams {
    id: number;
    asset: Asset;
}

export interface AssetRackCreateRequestParams {
    rack: Rack;
}

export interface AssetRackDestroyRequestParams {
    name: string;
}

export interface AssetRackListRequestParams {
    name?: string;
    page?: number;
    pageSize?: number;
}

export interface AssetRackPartialUpdateRequestParams {
    name: string;
    rack: Rack;
}

export interface AssetRackRetrieveRequestParams {
    name: string;
}

export interface AssetRackTypeCreateRequestParams {
    rackType: RackType;
}

export interface AssetRackTypeDestroyRequestParams {
    id: number;
}

export interface AssetRackTypeListRequestParams {
    model?: string;
    page?: number;
    pageSize?: number;
}

export interface AssetRackTypePartialUpdateRequestParams {
    id: number;
    rackType: RackType;
}

export interface AssetRackTypeRetrieveRequestParams {
    id: number;
}

export interface AssetRackTypeUpdateRequestParams {
    id: number;
    rackType: RackType;
}

export interface AssetRackUnitCreateRequestParams {
    rackUnit: RackUnit;
}

export interface AssetRackUnitDestroyRequestParams {
    id: number;
}

export interface AssetRackUnitListRequestParams {
    deviceHostname?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    rackLocation?: number;
    rackName?: string;
    search?: string;
}

export interface AssetRackUnitPartialUpdateRequestParams {
    id: number;
    rackUnit: RackUnit;
}

export interface AssetRackUnitRetrieveRequestParams {
    id: number;
}

export interface AssetRackUnitUpdateRequestParams {
    id: number;
    rackUnit: RackUnit;
}

export interface AssetRackUpdateRequestParams {
    name: string;
    rack: Rack;
}

export interface AssetVendorCreateRequestParams {
    vendor: Vendor;
}

export interface AssetVendorDestroyRequestParams {
    id: number;
}

export interface AssetVendorListRequestParams {
    name?: string;
    page?: number;
    pageSize?: number;
}

export interface AssetVendorPartialUpdateRequestParams {
    id: number;
    vendor: Vendor;
}

export interface AssetVendorRetrieveRequestParams {
    id: number;
}

export interface AssetVendorUpdateRequestParams {
    id: number;
    vendor: Vendor;
}


export interface AssetServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * AssetViewSet is a viewset for handling CRUD operations on Asset objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Asset objects.     serializer_class (Serializer): The serializer class used to serialize Asset objects.     pagination_class (Pagination): The pagination class used to paginate the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for ordering and filtering the results.     ordering_fields (str): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetCreate(requestParameters: AssetAssetCreateRequestParams, extraHttpRequestParams?: any): Observable<Asset>;

    /**
     * 
     * 
* @param requestParameters
     */
    assetAssetCustomFieldCreate(requestParameters: AssetAssetCustomFieldCreateRequestParams, extraHttpRequestParams?: any): Observable<AssetCustomField>;

    /**
     * 
     * 
* @param requestParameters
     */
    assetAssetCustomFieldDestroy(requestParameters: AssetAssetCustomFieldDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
* @param requestParameters
     */
    assetAssetCustomFieldList(requestParameters: AssetAssetCustomFieldListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAssetCustomFieldList>;

    /**
     * 
     * 
* @param requestParameters
     */
    assetAssetCustomFieldPartialUpdate(requestParameters: AssetAssetCustomFieldPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetCustomField>;

    /**
     * 
     * 
* @param requestParameters
     */
    assetAssetCustomFieldRetrieve(requestParameters: AssetAssetCustomFieldRetrieveRequestParams, extraHttpRequestParams?: any): Observable<AssetCustomField>;

    /**
     * 
     * 
* @param requestParameters
     */
    assetAssetCustomFieldUpdate(requestParameters: AssetAssetCustomFieldUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetCustomField>;

    /**
     * 
     * AssetViewSet is a viewset for handling CRUD operations on Asset objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Asset objects.     serializer_class (Serializer): The serializer class used to serialize Asset objects.     pagination_class (Pagination): The pagination class used to paginate the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for ordering and filtering the results.     ordering_fields (str): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetDestroy(requestParameters: AssetAssetDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * AssetViewSet is a viewset for handling CRUD operations on Asset objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Asset objects.     serializer_class (Serializer): The serializer class used to serialize Asset objects.     pagination_class (Pagination): The pagination class used to paginate the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for ordering and filtering the results.     ordering_fields (str): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetList(requestParameters: AssetAssetListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAssetList>;

    /**
     * 
     * AssetModelViewSet is a viewset for handling CRUD operations on AssetModel objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetModel objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetModel objects.     pagination_class (Pagination): The pagination class used for paginating the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for filtering and ordering the results.     ordering_fields (list): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetModelCreate(requestParameters: AssetAssetModelCreateRequestParams, extraHttpRequestParams?: any): Observable<AssetModel>;

    /**
     * 
     * AssetModelViewSet is a viewset for handling CRUD operations on AssetModel objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetModel objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetModel objects.     pagination_class (Pagination): The pagination class used for paginating the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for filtering and ordering the results.     ordering_fields (list): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetModelDestroy(requestParameters: AssetAssetModelDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * AssetModelViewSet is a viewset for handling CRUD operations on AssetModel objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetModel objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetModel objects.     pagination_class (Pagination): The pagination class used for paginating the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for filtering and ordering the results.     ordering_fields (list): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetModelList(requestParameters: AssetAssetModelListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAssetModelList>;

    /**
     * 
     * AssetModelViewSet is a viewset for handling CRUD operations on AssetModel objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetModel objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetModel objects.     pagination_class (Pagination): The pagination class used for paginating the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for filtering and ordering the results.     ordering_fields (list): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetModelPartialUpdate(requestParameters: AssetAssetModelPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetModel>;

    /**
     * 
     * AssetModelViewSet is a viewset for handling CRUD operations on AssetModel objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetModel objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetModel objects.     pagination_class (Pagination): The pagination class used for paginating the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for filtering and ordering the results.     ordering_fields (list): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetModelRetrieve(requestParameters: AssetAssetModelRetrieveRequestParams, extraHttpRequestParams?: any): Observable<AssetModel>;

    /**
     * 
     * AssetModelViewSet is a viewset for handling CRUD operations on AssetModel objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetModel objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetModel objects.     pagination_class (Pagination): The pagination class used for paginating the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for filtering and ordering the results.     ordering_fields (list): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetModelUpdate(requestParameters: AssetAssetModelUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetModel>;

    /**
     * 
     * AssetViewSet is a viewset for handling CRUD operations on Asset objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Asset objects.     serializer_class (Serializer): The serializer class used to serialize Asset objects.     pagination_class (Pagination): The pagination class used to paginate the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for ordering and filtering the results.     ordering_fields (str): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetPartialUpdate(requestParameters: AssetAssetPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<Asset>;

    /**
     * 
     * AssetViewSet is a viewset for handling CRUD operations on Asset objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Asset objects.     serializer_class (Serializer): The serializer class used to serialize Asset objects.     pagination_class (Pagination): The pagination class used to paginate the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for ordering and filtering the results.     ordering_fields (str): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetRetrieve(requestParameters: AssetAssetRetrieveRequestParams, extraHttpRequestParams?: any): Observable<Asset>;

    /**
     * 
     * AssetStateViewSet is a viewset for handling CRUD operations on AssetState objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetState objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize AssetState objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetStateCreate(requestParameters: AssetAssetStateCreateRequestParams, extraHttpRequestParams?: any): Observable<AssetState>;

    /**
     * 
     * AssetStateViewSet is a viewset for handling CRUD operations on AssetState objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetState objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize AssetState objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetStateDestroy(requestParameters: AssetAssetStateDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * AssetStateViewSet is a viewset for handling CRUD operations on AssetState objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetState objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize AssetState objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetStateList(requestParameters: AssetAssetStateListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAssetStateList>;

    /**
     * 
     * AssetStateViewSet is a viewset for handling CRUD operations on AssetState objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetState objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize AssetState objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetStatePartialUpdate(requestParameters: AssetAssetStatePartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetState>;

    /**
     * 
     * AssetStateViewSet is a viewset for handling CRUD operations on AssetState objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetState objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize AssetState objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetStateRetrieve(requestParameters: AssetAssetStateRetrieveRequestParams, extraHttpRequestParams?: any): Observable<AssetState>;

    /**
     * 
     * AssetStateViewSet is a viewset for handling CRUD operations on AssetState objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetState objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize AssetState objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetStateUpdate(requestParameters: AssetAssetStateUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetState>;

    /**
     * 
     * AssetTypeViewSet is a viewset for handling CRUD operations on AssetType model.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetType objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetType objects.     pagination_class (Pagination): The pagination class used for paginating the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetTypeCreate(requestParameters: AssetAssetTypeCreateRequestParams, extraHttpRequestParams?: any): Observable<AssetType>;

    /**
     * 
     * AssetTypeViewSet is a viewset for handling CRUD operations on AssetType model.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetType objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetType objects.     pagination_class (Pagination): The pagination class used for paginating the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetTypeDestroy(requestParameters: AssetAssetTypeDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * AssetTypeViewSet is a viewset for handling CRUD operations on AssetType model.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetType objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetType objects.     pagination_class (Pagination): The pagination class used for paginating the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetTypeList(requestParameters: AssetAssetTypeListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedAssetTypeList>;

    /**
     * 
     * AssetTypeViewSet is a viewset for handling CRUD operations on AssetType model.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetType objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetType objects.     pagination_class (Pagination): The pagination class used for paginating the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetTypePartialUpdate(requestParameters: AssetAssetTypePartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetType>;

    /**
     * 
     * AssetTypeViewSet is a viewset for handling CRUD operations on AssetType model.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetType objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetType objects.     pagination_class (Pagination): The pagination class used for paginating the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetTypeRetrieve(requestParameters: AssetAssetTypeRetrieveRequestParams, extraHttpRequestParams?: any): Observable<AssetType>;

    /**
     * 
     * AssetTypeViewSet is a viewset for handling CRUD operations on AssetType model.  Attributes:     queryset (QuerySet): The queryset that retrieves all AssetType objects.     serializer_class (Serializer): The serializer class used for serializing and deserializing AssetType objects.     pagination_class (Pagination): The pagination class used for paginating the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset.
* @param requestParameters
     */
    assetAssetTypeUpdate(requestParameters: AssetAssetTypeUpdateRequestParams, extraHttpRequestParams?: any): Observable<AssetType>;

    /**
     * 
     * AssetViewSet is a viewset for handling CRUD operations on Asset objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Asset objects.     serializer_class (Serializer): The serializer class used to serialize Asset objects.     pagination_class (Pagination): The pagination class used to paginate the results.     search_fields (list): The fields that can be searched using the search filter.     filter_backends (tuple): The filter backends used for ordering and filtering the results.     ordering_fields (str): The fields that can be used for ordering the results.     ordering (list): The default ordering for the results.     filterset_fields (list): The fields that can be used for filtering the results.
* @param requestParameters
     */
    assetAssetUpdate(requestParameters: AssetAssetUpdateRequestParams, extraHttpRequestParams?: any): Observable<Asset>;

    /**
     * 
     * RackViewSet is a viewset for handling CRUD operations on Rack objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Rack objects.     serializer_class (Serializer): The serializer class used for Rack objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetRackCreate(requestParameters: AssetRackCreateRequestParams, extraHttpRequestParams?: any): Observable<Rack>;

    /**
     * 
     * RackViewSet is a viewset for handling CRUD operations on Rack objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Rack objects.     serializer_class (Serializer): The serializer class used for Rack objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetRackDestroy(requestParameters: AssetRackDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * RackViewSet is a viewset for handling CRUD operations on Rack objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Rack objects.     serializer_class (Serializer): The serializer class used for Rack objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetRackList(requestParameters: AssetRackListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedRackList>;

    /**
     * 
     * RackViewSet is a viewset for handling CRUD operations on Rack objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Rack objects.     serializer_class (Serializer): The serializer class used for Rack objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetRackPartialUpdate(requestParameters: AssetRackPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<Rack>;

    /**
     * 
     * RackViewSet is a viewset for handling CRUD operations on Rack objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Rack objects.     serializer_class (Serializer): The serializer class used for Rack objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetRackRetrieve(requestParameters: AssetRackRetrieveRequestParams, extraHttpRequestParams?: any): Observable<Rack>;

    /**
     * 
     * RackTypeViewSet is a viewset for handling CRUD operations on RackType model.  Attributes:     queryset (QuerySet): A queryset containing all RackType objects.     serializer_class (Serializer): The serializer class used for RackType objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): Default ordering for the queryset, ordered by \&#39;model\&#39;.     filterset_fields (list): Fields that can be used to filter the queryset, filtered by \&#39;model\&#39;.
* @param requestParameters
     */
    assetRackTypeCreate(requestParameters: AssetRackTypeCreateRequestParams, extraHttpRequestParams?: any): Observable<RackType>;

    /**
     * 
     * RackTypeViewSet is a viewset for handling CRUD operations on RackType model.  Attributes:     queryset (QuerySet): A queryset containing all RackType objects.     serializer_class (Serializer): The serializer class used for RackType objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): Default ordering for the queryset, ordered by \&#39;model\&#39;.     filterset_fields (list): Fields that can be used to filter the queryset, filtered by \&#39;model\&#39;.
* @param requestParameters
     */
    assetRackTypeDestroy(requestParameters: AssetRackTypeDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * RackTypeViewSet is a viewset for handling CRUD operations on RackType model.  Attributes:     queryset (QuerySet): A queryset containing all RackType objects.     serializer_class (Serializer): The serializer class used for RackType objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): Default ordering for the queryset, ordered by \&#39;model\&#39;.     filterset_fields (list): Fields that can be used to filter the queryset, filtered by \&#39;model\&#39;.
* @param requestParameters
     */
    assetRackTypeList(requestParameters: AssetRackTypeListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedRackTypeList>;

    /**
     * 
     * RackTypeViewSet is a viewset for handling CRUD operations on RackType model.  Attributes:     queryset (QuerySet): A queryset containing all RackType objects.     serializer_class (Serializer): The serializer class used for RackType objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): Default ordering for the queryset, ordered by \&#39;model\&#39;.     filterset_fields (list): Fields that can be used to filter the queryset, filtered by \&#39;model\&#39;.
* @param requestParameters
     */
    assetRackTypePartialUpdate(requestParameters: AssetRackTypePartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<RackType>;

    /**
     * 
     * RackTypeViewSet is a viewset for handling CRUD operations on RackType model.  Attributes:     queryset (QuerySet): A queryset containing all RackType objects.     serializer_class (Serializer): The serializer class used for RackType objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): Default ordering for the queryset, ordered by \&#39;model\&#39;.     filterset_fields (list): Fields that can be used to filter the queryset, filtered by \&#39;model\&#39;.
* @param requestParameters
     */
    assetRackTypeRetrieve(requestParameters: AssetRackTypeRetrieveRequestParams, extraHttpRequestParams?: any): Observable<RackType>;

    /**
     * 
     * RackTypeViewSet is a viewset for handling CRUD operations on RackType model.  Attributes:     queryset (QuerySet): A queryset containing all RackType objects.     serializer_class (Serializer): The serializer class used for RackType objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): Default ordering for the queryset, ordered by \&#39;model\&#39;.     filterset_fields (list): Fields that can be used to filter the queryset, filtered by \&#39;model\&#39;.
* @param requestParameters
     */
    assetRackTypeUpdate(requestParameters: AssetRackTypeUpdateRequestParams, extraHttpRequestParams?: any): Observable<RackType>;

    /**
     * 
     * RackUnitViewSet is a viewset for handling CRUD operations on RackUnit objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all RackUnit objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize RackUnit objects.     pagination_class (Pagination): The pagination class used to paginate the results.     filter_backends (tuple): The filter backends used for filtering and searching the queryset.     filterset_fields (list): The fields that can be used to filter the queryset.     search_fields (list): The fields that can be used to search the queryset.
* @param requestParameters
     */
    assetRackUnitCreate(requestParameters: AssetRackUnitCreateRequestParams, extraHttpRequestParams?: any): Observable<RackUnit>;

    /**
     * 
     * RackUnitViewSet is a viewset for handling CRUD operations on RackUnit objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all RackUnit objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize RackUnit objects.     pagination_class (Pagination): The pagination class used to paginate the results.     filter_backends (tuple): The filter backends used for filtering and searching the queryset.     filterset_fields (list): The fields that can be used to filter the queryset.     search_fields (list): The fields that can be used to search the queryset.
* @param requestParameters
     */
    assetRackUnitDestroy(requestParameters: AssetRackUnitDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * RackUnitViewSet is a viewset for handling CRUD operations on RackUnit objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all RackUnit objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize RackUnit objects.     pagination_class (Pagination): The pagination class used to paginate the results.     filter_backends (tuple): The filter backends used for filtering and searching the queryset.     filterset_fields (list): The fields that can be used to filter the queryset.     search_fields (list): The fields that can be used to search the queryset.
* @param requestParameters
     */
    assetRackUnitList(requestParameters: AssetRackUnitListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedRackUnitList>;

    /**
     * 
     * RackUnitViewSet is a viewset for handling CRUD operations on RackUnit objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all RackUnit objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize RackUnit objects.     pagination_class (Pagination): The pagination class used to paginate the results.     filter_backends (tuple): The filter backends used for filtering and searching the queryset.     filterset_fields (list): The fields that can be used to filter the queryset.     search_fields (list): The fields that can be used to search the queryset.
* @param requestParameters
     */
    assetRackUnitPartialUpdate(requestParameters: AssetRackUnitPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<RackUnit>;

    /**
     * 
     * RackUnitViewSet is a viewset for handling CRUD operations on RackUnit objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all RackUnit objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize RackUnit objects.     pagination_class (Pagination): The pagination class used to paginate the results.     filter_backends (tuple): The filter backends used for filtering and searching the queryset.     filterset_fields (list): The fields that can be used to filter the queryset.     search_fields (list): The fields that can be used to search the queryset.
* @param requestParameters
     */
    assetRackUnitRetrieve(requestParameters: AssetRackUnitRetrieveRequestParams, extraHttpRequestParams?: any): Observable<RackUnit>;

    /**
     * 
     * RackUnitViewSet is a viewset for handling CRUD operations on RackUnit objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all RackUnit objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize RackUnit objects.     pagination_class (Pagination): The pagination class used to paginate the results.     filter_backends (tuple): The filter backends used for filtering and searching the queryset.     filterset_fields (list): The fields that can be used to filter the queryset.     search_fields (list): The fields that can be used to search the queryset.
* @param requestParameters
     */
    assetRackUnitUpdate(requestParameters: AssetRackUnitUpdateRequestParams, extraHttpRequestParams?: any): Observable<RackUnit>;

    /**
     * 
     * RackViewSet is a viewset for handling CRUD operations on Rack objects.  Attributes:     queryset (QuerySet): The queryset that retrieves all Rack objects.     serializer_class (Serializer): The serializer class used for Rack objects.     pagination_class (Pagination): The pagination class used for paginating results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetRackUpdate(requestParameters: AssetRackUpdateRequestParams, extraHttpRequestParams?: any): Observable<Rack>;

    /**
     * 
     * VendorViewSet is a viewset for handling CRUD operations on Vendor model.  Attributes:     queryset (QuerySet): The queryset that retrieves all Vendor objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize Vendor objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetVendorCreate(requestParameters: AssetVendorCreateRequestParams, extraHttpRequestParams?: any): Observable<Vendor>;

    /**
     * 
     * VendorViewSet is a viewset for handling CRUD operations on Vendor model.  Attributes:     queryset (QuerySet): The queryset that retrieves all Vendor objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize Vendor objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetVendorDestroy(requestParameters: AssetVendorDestroyRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * VendorViewSet is a viewset for handling CRUD operations on Vendor model.  Attributes:     queryset (QuerySet): The queryset that retrieves all Vendor objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize Vendor objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetVendorList(requestParameters: AssetVendorListRequestParams, extraHttpRequestParams?: any): Observable<PaginatedVendorList>;

    /**
     * 
     * VendorViewSet is a viewset for handling CRUD operations on Vendor model.  Attributes:     queryset (QuerySet): The queryset that retrieves all Vendor objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize Vendor objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetVendorPartialUpdate(requestParameters: AssetVendorPartialUpdateRequestParams, extraHttpRequestParams?: any): Observable<Vendor>;

    /**
     * 
     * VendorViewSet is a viewset for handling CRUD operations on Vendor model.  Attributes:     queryset (QuerySet): The queryset that retrieves all Vendor objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize Vendor objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetVendorRetrieve(requestParameters: AssetVendorRetrieveRequestParams, extraHttpRequestParams?: any): Observable<Vendor>;

    /**
     * 
     * VendorViewSet is a viewset for handling CRUD operations on Vendor model.  Attributes:     queryset (QuerySet): The queryset that retrieves all Vendor objects.     serializer_class (Serializer): The serializer class used to serialize and deserialize Vendor objects.     pagination_class (Pagination): The pagination class used to paginate the results.     ordering (list): The default ordering for the queryset, ordered by \&#39;name\&#39;.     filterset_fields (list): The fields that can be used to filter the queryset, in this case, \&#39;name\&#39;.
* @param requestParameters
     */
    assetVendorUpdate(requestParameters: AssetVendorUpdateRequestParams, extraHttpRequestParams?: any): Observable<Vendor>;

}
